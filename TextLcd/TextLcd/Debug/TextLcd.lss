
TextLcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000571  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fe  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049c  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__vector_1>
   6:	00 00       	nop
   8:	9b c0       	rjmp	.+310    	; 0x140 <__vector_2>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__vector_3>
   e:	00 00       	nop
  10:	e9 c0       	rjmp	.+466    	; 0x1e4 <__vector_4>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	c0 c0       	rjmp	.+384    	; 0x236 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
	return 0;
#endif
	
	// Button
#ifdef BUTTON
	EIMSK = 0x0F;
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	89 bf       	out	0x39, r24	; 57
	EICRA = 0b10101010;
  bc:	8a ea       	ldi	r24, 0xAA	; 170
  be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIFR = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	88 bf       	out	0x38, r24	; 56
	
	SREG = 0x80;
  c6:	90 e8       	ldi	r25, 0x80	; 128
  c8:	9f bf       	out	0x3f, r25	; 63
	
	DDRA = 0xFF;
  ca:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  cc:	1b ba       	out	0x1b, r1	; 27
	
	DDRD = 0x00;
  ce:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
  d0:	12 ba       	out	0x12, r1	; 18
	
	//
	
	sei();
  d2:	78 94       	sei
	while (true)
	{
		PORTA = ~PORTA;
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	80 95       	com	r24
  d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	87 ea       	ldi	r24, 0xA7	; 167
  de:	91 e6       	ldi	r25, 0x61	; 97
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x32>
  ea:	00 00       	nop
  ec:	f3 cf       	rjmp	.-26     	; 0xd4 <main+0x1c>

000000ee <__vector_1>:
	
#endif
}

ISR(INT0_vect)
{	
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
	for (int i = 0; i < 10; i++)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	2a 30       	cpi	r18, 0x0A	; 10
 108:	31 05       	cpc	r19, r1
 10a:	7c f4       	brge	.+30     	; 0x12a <__vector_1+0x3c>
	{
		PORTA = ~PORTA;
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	80 95       	com	r24
 110:	8b bb       	out	0x1b, r24	; 27
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_1+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_1+0x34>
 122:	00 00       	nop
#endif
}

ISR(INT0_vect)
{	
	for (int i = 0; i < 10; i++)
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	ee cf       	rjmp	.-36     	; 0x106 <__vector_1+0x18>
	{
		PORTA = ~PORTA;
		_delay_ms(800);
	}
	
	EIFR = 0x00;
 12a:	18 be       	out	0x38, r1	; 56
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_2>:

ISR(INT1_vect)
{	
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
	for (int i = 0; i < 20; i++)
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	24 31       	cpi	r18, 0x14	; 20
 15a:	31 05       	cpc	r19, r1
 15c:	7c f4       	brge	.+30     	; 0x17c <__vector_2+0x3c>
	{
		PORTA = ~PORTA;
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	80 95       	com	r24
 162:	8b bb       	out	0x1b, r24	; 27
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	8b e4       	ldi	r24, 0x4B	; 75
 168:	9d e1       	ldi	r25, 0x1D	; 29
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <__vector_2+0x2a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_2+0x34>
 174:	00 00       	nop
	EIFR = 0x00;
}

ISR(INT1_vect)
{	
	for (int i = 0; i < 20; i++)
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	ee cf       	rjmp	.-36     	; 0x158 <__vector_2+0x18>
	{
		PORTA = ~PORTA;
		_delay_ms(600);
	}
	
	EIFR = 0x00;
 17c:	18 be       	out	0x38, r1	; 56
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_3>:

ISR(INT2_vect)
{	
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
	for (int i = 0; i < 30; i++)
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	2e 31       	cpi	r18, 0x1E	; 30
 1ac:	31 05       	cpc	r19, r1
 1ae:	7c f4       	brge	.+30     	; 0x1ce <__vector_3+0x3c>
	{
		PORTA = ~PORTA;
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	80 95       	com	r24
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	4f ef       	ldi	r20, 0xFF	; 255
 1b8:	87 e8       	ldi	r24, 0x87	; 135
 1ba:	93 e1       	ldi	r25, 0x13	; 19
 1bc:	41 50       	subi	r20, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__vector_3+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__vector_3+0x34>
 1c6:	00 00       	nop
	EIFR = 0x00;
}

ISR(INT2_vect)
{	
	for (int i = 0; i < 30; i++)
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	ee cf       	rjmp	.-36     	; 0x1aa <__vector_3+0x18>
	{
		PORTA = ~PORTA;
		_delay_ms(400);
	}
	
	EIFR = 0x00;
 1ce:	18 be       	out	0x38, r1	; 56
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_4>:

ISR(INT3_vect)
{	
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
	for (int i = 0; i < 40; i++)
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	28 32       	cpi	r18, 0x28	; 40
 1fe:	31 05       	cpc	r19, r1
 200:	7c f4       	brge	.+30     	; 0x220 <__vector_4+0x3c>
	{
		PORTA = ~PORTA;
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	80 95       	com	r24
 206:	8b bb       	out	0x1b, r24	; 27
 208:	4f ef       	ldi	r20, 0xFF	; 255
 20a:	83 ec       	ldi	r24, 0xC3	; 195
 20c:	99 e0       	ldi	r25, 0x09	; 9
 20e:	41 50       	subi	r20, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <__vector_4+0x2a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__vector_4+0x34>
 218:	00 00       	nop
	EIFR = 0x00;
}

ISR(INT3_vect)
{	
	for (int i = 0; i < 40; i++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	ee cf       	rjmp	.-36     	; 0x1fc <__vector_4+0x18>
	{
		PORTA = ~PORTA;
		_delay_ms(200);
	}
	
	EIFR = 0x00;
 220:	18 be       	out	0x38, r1	; 56
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
